'''
Entity class to be used within formulite
'''

from importlib import util
import sys
import os

def load_module(module_name, module_path, piece=None):
    '''Function to import modules dinamically'''
    # print(f"Loading module {module_name}")

    spec = util.spec_from_file_location(module_name, module_path)
    module = util.module_from_spec(spec)
    sys.modules[module_name] = module
    spec.loader.exec_module(module)

    if piece:
        return getattr(module, piece)

def ident(level):
    return "    " * level

class Entity:
    """This class represents the tables in the database (kind of a metaclass)"""
    def __init__(self, e_name, args_dict):
        self.e_name = e_name
        self.args_dict = args_dict
        self.primary_key = []
        self.foreign_key = {}
    
    def writedown(self, filename):
        """method to actually write the entity object model in the corresponding file"""
        if not self.primary_key:
            print(f"Private key not informed, object {self.e_name} could not be written")
            return
        if not os.path.exists(filename):
            with open(filename, "w+") as f:
                f.write("\'\'\' This file is automatically generated. \'\'\'\n\n")
        with open(filename, "a") as obj_file:
            obj_file.write("class " + self.e_name +":\n\n")

            obj_file.write(ident(1) + "_attribute_types = {\n")
            attribs = []
            for key, value in self.args_dict.items():
                attribs.append(f"\"{key}\":\"{value}\"")
            obj_file.write(ident(2) + ", ".join(attribs) + "\n" + ident(1) + "}\n\n")

            obj_file.write(ident(1) + "_primary_key = [\"" + "\", \"".join(self.primary_key) + "\"]\n\n")

            if self.foreign_key:
                obj_file.write(ident(1) + "_foreign_key = {\n")
                fk = []
                for key, value in self.foreign_key.items():
                    fk.append(f"\"{key}\":\"{value}\"")
                obj_file.write(ident(2) + ", ".join(fk) + "\n" + ident(1) + "}\n\n")

            obj_file.write(ident(1) + "def __init__(self, **kargs):\n")

            for key, value in self.args_dict.items():
                #obj_file.write(ident(2) + "self." + key + " = " + key + "\n")
                obj_file.write(ident(2) + f"self.{key} = kargs[\"{key}\"]\n")
            obj_file.write("\n")

    def joined_primary_key(self, pk):
        return ", ".join(pk)

    def create_table_query(self, filename, readable=False):
        '''returns the query used for table creation'''
        endl = " "
        if readable:
            endl = "\n"
        sql = f"CREATE TABLE IF NOT EXISTS {self.e_name}({endl}"
        for key, value in self.args_dict.items():
            sql += f"{key} {value},{endl}"
        #pkeys = ", ".join(self.primary_key)
        sql += f"PRIMARY KEY({self.joined_primary_key(self.primary_key)})"
        if self.foreign_key:
            for key, value in self.foreign_key.items():
                e_class = load_module(value.lower(), filename, value)
                sql += F",{endl}FOREIGN KEY ({key}) REFERENCES {value} ({self.joined_primary_key(e_class._primary_key)})"
        return sql + f"{endl})"
